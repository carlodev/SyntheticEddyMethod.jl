var documenterSearchIndex = {"docs":
[{"location":"advanced_usage/#Advanced-usage","page":"Advanced Usage","title":"Advanced usage","text":"","category":"section"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"In this page are provided some example on how the user can customize the eddy generation.","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Defining the Virtual Box in y and z directions.","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"using SyntheticEddyMethod\n\nσ = 0.1\nb = 2.0\na = 0.0\n\ny = collect(a:0.1:b)\nz = collect(a:0.1:b)","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"It is possible also to specify the x direction dimensions, a different shape funcion and different σ in the three different directions. The shape coded can be seen in the Shapefunctions.jl file.","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"x = collect(-1:0.1:1)\nσx = 0.1\nσy = 0.05\nσz = 0.07\nσ = [σx,σy,σz]\nVboxinfo = VirtualBox(x,y,z,σ; shape_fun = step_fun)\nN = Vboxinfo.N\nEddies = initialize_eddies(N, σ, Vboxinfo)\n","category":"page"},{"location":"advanced_usage/#Define-custom-Reynolds-Stress-Tensor","page":"Advanced Usage","title":"Define custom Reynolds Stress Tensor","text":"","category":"section"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"The user can also use a custom Reynolds stress just by writing a 3x3 matrix.","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"A = [1.87e-5 -8.6e-8  -8.2e-7; -8.6e-8 5.27e-8 6.8e-8; -8.2e-7 4.9e-9 2.64e-6]","category":"page"},{"location":"advanced_usage/#Import-the-Reynolds-Stress-Tensor-from-file","page":"Advanced Usage","title":"Import the Reynolds Stress Tensor from file","text":"","category":"section"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"Or use a database where the the Reynolds Stress is defined pointwise. ","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"reynolds_stress_file = \"src/Data/Re_ch.xlsx\"\nA = get_reynolds_stress_from_file(reynolds_stress_file)","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"An curious user notice that in this last case the Reynolds Stress is not a matrix, but it is an interpolator object. It depends on the point location where the user want to compute the fluctuations.","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"vector_points = [[0.0, 1.0, 2.5]]\ndt = 0.01\nU₀ = 1.0\ncompute_fluct(vector_points, dt, Eddies, U₀, Vboxinfo,A )","category":"page"},{"location":"advanced_usage/#Analyze-the-signal","page":"Advanced Usage","title":"Analyze the signal","text":"","category":"section"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"A simple case is used.","category":"page"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"using SyntheticEddyMethod\nusing Statistics\n\nσ = 0.1 #eddy dimensions, the same in all the directions\nb = 5.0\na = 0.0\n\n\n#Defining the Virtual Box domain\nx = -σ:0.1:+σ \ny = collect(a:0.1:b)\nz = collect(a:0.1:b)\n\n\nVboxinfo = VirtualBox(y,z,σ)\nN = Vboxinfo.N\ndt = 0.01\n\nU₀ = 1.0 #Convective Velocity\nTI = 0.01 #turbulence intensity\n\nA, Eddies = initialize_eddies(U₀, TI, Vboxinfo)\n\n\n#Computing the velocity in the middle of the VirtualBox domain\nvector_points = [[0.0, b/2, b/2]]\n\n#Defining how many time interval\nNt = 1000\nU = zeros(Nt, 3)\n\n\nfor i = 1:1:Nt\n    U[i,:] = compute_fluct(vector_points, dt, Eddies, U₀, Vboxinfo, A)[1]\nend\n\n#The deviation standard should approach the turbulence intensity\nStatistics.std(U[:,1])\nStatistics.std(U[:,2])\nStatistics.std(U[:,3])\n","category":"page"},{"location":"advanced_usage/#Spectral-Analysis","page":"Advanced Usage","title":"Spectral Analysis","text":"","category":"section"},{"location":"advanced_usage/","page":"Advanced Usage","title":"Advanced Usage","text":"using SyntheticEddyMethod\nusing DataFrames, XLSX, Plots\n#Turbulence intensity to test\nTI_vec = 0.01:0.01:0.05\n\nk = 0.1:1000\nE = (k).^(-5/3)*0.01 #multiplied by 100 for shifting the curve in the top part\n\nN_restart = 20\nNt = 2000\ndt = 0.001\n\n#It can take up to 10 minutes\nfor TI in TI_vec\n    A, Eddies = initialize_eddies(U₀, TI, Vboxinfo)\n    PSD = 0.0\n    freqs = 0.0   \n\n    for i=1:1:N_restart\n         q = Vector{Float64}[]\n        for j = 1:1:Nt\n            qi = compute_fluct(vector_points, dt, Eddies, U₀, Vboxinfo, A)[1]\n            push!(q,qi)\n        end\n        println(i)\n\n        Ek =  compute_Ek(q, U₀)\n        PSD_tmp, freqs = fft_from_signal(Ek, dt)\n        PSD = PSD .+ PSD_tmp ./N_restart\n\n    end\n\nPSD_data = DataFrame([PSD, freqs], [:PSD, :freqs])\n        XLSX.writetable(\"test/psd_results_$TI.xlsx\", \"$TI\" => PSD_data)\nend\n\n#Random Signal\nN_rand = 1000\nPSD_rand_tot = 0.0\nfreqs_rand = 0.0\nfor i = 1:1:N_rand\n    rand_signal = randn(3000).*(TI)\n    PSD_rand, freqs_rand = fft_from_signal(3/2 .* rand_signal.^2 ,dt)\n    PSD_rand_tot = PSD_rand_tot .+ 1/N_rand .*PSD_rand\nend\n\n\n\n\nPSD_data = DataFrame[]\n\nfor i = eachindex(TI_vec)\n    TI = TI_vec[i]\n    filename = \"test/psd_results_$TI.xlsx\"\n    df_tmp = DataFrame(XLSX.readtable(filename, \"$TI\")...)\n    push!(PSD_data, df_tmp)\nend\n\n\nPlots.plot(xaxis=:log, yaxis=:log, xlim = [0.5, 1e3], ylims =[1e-10, 1], xlabel=\"k\", ylabel=\"E(k)\", legend=:bottomleft, xticks=[1,10,100,1000])\nfor i = eachindex(TI_vec)\n    TI = TI_vec[i]\n    Plots.plot!(PSD_data[i].freqs, PSD_data[i].PSD, label = \"SEM - TI = $TI\")\n\nend\n\nplot!(freqs_rand, PSD_rand_tot, label = \"RAND\")\nplot!(k, E, linestyle=:dash, label = \"E(k)∝k^-5/3\")\n\n","category":"page"},{"location":"usage/#Package-usage","page":"Usage","title":"Package usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"At first, the user defines the dimension and resolution of the virtual box where the eddies are going to be generated as well as the dimension of the eddies (σ). A common choice is σ = 2Δz or σ = Δz, where Δz is the mesh resolution in the z direction.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using SyntheticEddyMethod\n\nσ = 0.1\nb = 5.0\na = 0.0\n\ny = collect(a:0.1:b)\nz = collect(a:0.1:b)\n","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Notice: only the first and last value of ´y´ and ´z´ are used to create the VirtualBox.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Then you create the VirtualBox structure that has embedded all the information about the virtual box where the eddy are generated. The number of eddy is automatically computed in order to guarantee an homogeneous fill. You can manually override the value (Vboxinfo.N).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"\nVboxinfo = VirtualBox(y,z,σ)\n\nN = Vboxinfo.N #you can override it ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Then, eddies are initialize in the virtualbox with random values of position and intensity. You have to specify the time-step, dt. Then the Reynolds stress tensor. Here homegeneous and isotropic turbulence is considered, so R_ij = 0 i=j R_ij = 0 i=j, and the terms are computed from the turbulence intensity (TI). Then the Matrix A is created using the cholesky_decomposition function.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Eddies = initialize_eddies(N, σ, Vboxinfo)\nt = 0\ndt = 0.001\nU₀ = 1.0\nTI = 0.01 #turbulence intensity\n\nA, Eddies = initialize_eddies(U₀, TI, Vboxinfo)\n","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"You have to create a Vector{Vector{Float64}} of points where you want to evaluate the speed.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"x = 0.0\nvector_points = create_vector_points(x, y, z)\n","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"You can create evaluate the speed in just one point (useful for monitoring how the velocity varies in time and creating the spectra)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"vector_points = [[0.0, 1.0, 2.5]]","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Compute the velocity fluctuation and then is 'corrected' using the Reynolds Stress tensor.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"u_fluct = compute_fluct(vector_points, dt, Eddies, U₀, Vboxinfo,A )","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Compute the turbulent kinetic energy","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"    Ek  = compute_Ek(u_fluct, U₀)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"From here you can generate the spectra of your signal. For more detail look at files in test/","category":"page"},{"location":"exploring/#Exploring-the-package","page":"Exploring","title":"Exploring the package","text":"","category":"section"},{"location":"exploring/#Visualize-the-centre-of-the-eddies","page":"Exploring","title":"Visualize the centre of the eddies","text":"","category":"section"},{"location":"exploring/","page":"Exploring","title":"Exploring","text":"Notice that the default value of the number of eddies is overwritten to reduce the total number and make the visualization easier","category":"page"},{"location":"exploring/","page":"Exploring","title":"Exploring","text":"using SyntheticEddyMethod\nusing Plots\nσ = 0.1\nb = 5.0\na = 0.0\nx = collect(-0.1:0.1:0.1)\ny = collect(a:0.1:b)\nz = collect(a:0.1:b)\n\n\nVboxinfo = VirtualBox(x, y,z, σ)\nVboxinfo.N = 100\ndt = 0.01\n\nU₀ = 1.0 #Convective Velocity\nTI = 0.2 #turbulence intensity\nA, Eddies = initialize_eddies(U₀, TI, Vboxinfo)\n\nPlots.scatter([Eddies[1].xᵢ[1]], [Eddies[1].xᵢ[2]], [Eddies[1].xᵢ[3]], legend=false, ms=2, color=:black)\nfor i = 2:1:length(Eddies)-1\n    Plots.scatter!([Eddies[i].xᵢ[1]], [Eddies[i].xᵢ[2]] , [Eddies[i].xᵢ[3]],  legend=false,  ms=2, color=:black)\n\nend\nPlots.scatter!([Eddies[end].xᵢ[1]], [Eddies[end].xᵢ[2]] , [Eddies[end].xᵢ[3]],   legend=false,  ms=2, color=:black)\n\n","category":"page"},{"location":"exploring/#Visualize-isosurface-velocity","page":"Exploring","title":"Visualize isosurface velocity","text":"","category":"section"},{"location":"exploring/","page":"Exploring","title":"Exploring","text":"using PlotlyJS\nX, Y, Z = mgrid(x, y, z)\nvector_points = create_vector_points(x, y, z)\n\nvalue = compute_uᵢₚ(vector_points, dt, Eddies, U₀, Vboxinfo)[1]\nvalue = compute_fluct(vector_points, dt, Eddies, U₀, Vboxinfo,A)\n\niso_surfaces = isosurface(\n    x=X[:],\n    y=Y[:],\n    z=Z[:],\n    value=value[:,1],\n    isomin=0.1,\n    isomax=1,\n    surface_count=3,\n    opacity=0.5,\n    caps=attr(x_show=false, y_show=false)\n)\n\nlayout=Layout(yaxis=attr(scaleanchor=\"x\", scaleratio=1), zaxis=attr(scaleanchor=\"x\", scaleratio=1))\nio = PlotlyJS.plot(iso_surfaces, Layout(yaxis=attr(scaleanchor=\"x\", scaleratio=1)))","category":"page"},{"location":"ref/#Exported-Types-and-Functions","page":"-","title":"Exported Types and Functions","text":"","category":"section"},{"location":"ref/","page":"-","title":"-","text":"SEM_EDDY\nVirtualBox\nconvect_eddy\ncreate_vector_points\ncompute_Ek\ninitialize_eddies\ncompute_uᵢₚ\ncholesky_decomposition","category":"page"},{"location":"ref/#SyntheticEddyMethod.SEM_EDDY","page":"-","title":"SyntheticEddyMethod.SEM_EDDY","text":"Structure with the property of a single eddy\n\n\n\n\n\n","category":"type"},{"location":"ref/#SyntheticEddyMethod.VirtualBox","page":"-","title":"SyntheticEddyMethod.VirtualBox","text":"Virtual Volume box where the eddies are created\n\n\n\n\n\n","category":"type"},{"location":"ref/#SyntheticEddyMethod.convect_eddy","page":"-","title":"SyntheticEddyMethod.convect_eddy","text":"Compute the new position of all the Eddies. We consider only the convective velocity along x axis. If outside the Virtual Box, a new eddy is randomly generated inside the Virtual Box\n\n\n\n\n\n","category":"function"},{"location":"ref/#SyntheticEddyMethod.create_vector_points","page":"-","title":"SyntheticEddyMethod.create_vector_points","text":"Create a vector of points\n\n\n\n\n\n","category":"function"},{"location":"ref/#SyntheticEddyMethod.compute_Ek","page":"-","title":"SyntheticEddyMethod.compute_Ek","text":"Compute turbulent kinetic energy\n\n\n\n\n\n","category":"function"},{"location":"ref/#SyntheticEddyMethod.initialize_eddies","page":"-","title":"SyntheticEddyMethod.initialize_eddies","text":"Initialize Eddy position and intensity\n\n\n\n\n\n","category":"function"},{"location":"ref/#SyntheticEddyMethod.compute_uᵢₚ","page":"-","title":"SyntheticEddyMethod.compute_uᵢₚ","text":"The velocity in the 3 directions is computed in each point provided in x\n\n\n\n\n\n","category":"function"},{"location":"ref/#SyntheticEddyMethod.cholesky_decomposition","page":"-","title":"SyntheticEddyMethod.cholesky_decomposition","text":"Cholesky Decomposition of Reynolds Stress Tensor\n\n\n\n\n\n","category":"function"},{"location":"#SyntheticEddyMethod.jl","page":"Introduction","title":"SyntheticEddyMethod.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Package for synthetic eddy generation","category":"page"},{"location":"#Package-Features","page":"Introduction","title":"Package Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Create coeherent eddies in 3D domain","category":"page"},{"location":"#Acknowledgement","page":"Introduction","title":"Acknowledgement","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"nomenclature: 10.1016/j.ijheatfluidflow.2006.02.006\nshape function definition thanks to the Fortran 90 code https://github.com/blackcata/SEM.git and the related paper 10.1016/j.ijheatmasstransfer.2019.02.061\nhttps://nheri-simcenter.github.io/WE-UQ-Documentation/common/technical_manual/desktop/WEUQ/TinF.html for detailed description of the procedure","category":"page"}]
}
